

Ltac aply_breq_then_same  := 
 match goal with
| [ |- (if_then_else_M ?B ?X ?Y1) # (if_then_else_M ?B ?X ?Y2)] => apply breq_msgeq1'; simpl; redg
end.

Ltac aply_breq :=
match goal with
| [|- (if_then_else_M ?B ?X1 ?Y1) # (if_then_else_M ?B ?X2 ?Y2) ] =>  apply breq_msgeq'; simpl; redg; try reflexivity

end.


Ltac rew_lhs n := 
match goal with 
| [|- (if_then_else_M (EQ_M (to ?X) (i ?N)) ?X1 ?Y1) # _ ] => assert (N <> n)
end .
Ltac aply_eval_lhs := 
match goal with 
| [H: ?N <> ?N2 |- _ ] => match goal with 
| [|- (if_then_else_M (EQ_M (to ?X) (i ?N)) ?X1 ?Y1) # _ ] =>  apply IFEVAL_M''' with (x:= (to X)) (n1:= N) (n2:= N2) (t1 := X1) (t2:= Y1) in H; rewrite H; clear H; simpl; repeat redg; repeat rewrite IFTFb end
end. 
Ltac rew_rhs n := 
match goal with 
| [|- (if_then_else_M (EQ_M (to ?X) (i ?N)) ?X1 ?Y1) # _ ] => assert (N <> n)
end .
Ltac aply_eval_rhs := 
match goal with 
| [H: ?N <> ?N2 |- _ ] => match goal with 
| [|- _ # (if_then_else_M (EQ_M (to ?X) (i ?N)) ?X1 ?Y1) ] =>  apply IFEVAL_M''' with (x:= (to X)) (n1:= N) (n2:= N2) (t1 := X1) (t2:= Y1) in H; rewrite H; clear H; simpl; repeat redg; repeat rewrite IFTFb end
end. 
